/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface NFTMarketplaceInterface extends ethers.utils.Interface {
  functions: {
    "createMarketItem(address,uint256,uint256)": FunctionFragment;
    "createMarketSale(address,uint256)": FunctionFragment;
    "deleteMarketItem(uint256)": FunctionFragment;
    "fetchActiveItems()": FunctionFragment;
    "fetchMyCreatedItems()": FunctionFragment;
    "fetchMyPurchasedItems()": FunctionFragment;
    "getListingFee()": FunctionFragment;
    "listingFee()": FunctionFragment;
    "marketowner()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createMarketItem",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createMarketSale",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteMarketItem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchActiveItems",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fetchMyCreatedItems",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fetchMyPurchasedItems",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getListingFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "listingFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketowner",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "createMarketItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createMarketSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteMarketItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchActiveItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchMyCreatedItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchMyPurchasedItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getListingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listingFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "marketowner",
    data: BytesLike
  ): Result;

  events: {
    "MarketItemCreated(uint256,address,uint256,address,address,uint256,uint8)": EventFragment;
    "MarketItemSold(uint256,address,uint256,address,address,uint256,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MarketItemCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketItemSold"): EventFragment;
}

export type MarketItemCreatedEvent = TypedEvent<
  [BigNumber, string, BigNumber, string, string, BigNumber, number] & {
    id: BigNumber;
    nftContract: string;
    tokenId: BigNumber;
    seller: string;
    buyer: string;
    price: BigNumber;
    state: number;
  }
>;

export type MarketItemSoldEvent = TypedEvent<
  [BigNumber, string, BigNumber, string, string, BigNumber, number] & {
    id: BigNumber;
    nftContract: string;
    tokenId: BigNumber;
    seller: string;
    buyer: string;
    price: BigNumber;
    state: number;
  }
>;

export class NFTMarketplace extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: NFTMarketplaceInterface;

  functions: {
    createMarketItem(
      nftContract: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createMarketSale(
      nftContract: string,
      id: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deleteMarketItem(
      itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fetchActiveItems(
      overrides?: CallOverrides
    ): Promise<
      [
        ([BigNumber, string, BigNumber, string, string, BigNumber, number] & {
          id: BigNumber;
          nftContract: string;
          tokenId: BigNumber;
          seller: string;
          buyer: string;
          price: BigNumber;
          state: number;
        })[]
      ]
    >;

    fetchMyCreatedItems(
      overrides?: CallOverrides
    ): Promise<
      [
        ([BigNumber, string, BigNumber, string, string, BigNumber, number] & {
          id: BigNumber;
          nftContract: string;
          tokenId: BigNumber;
          seller: string;
          buyer: string;
          price: BigNumber;
          state: number;
        })[]
      ]
    >;

    fetchMyPurchasedItems(
      overrides?: CallOverrides
    ): Promise<
      [
        ([BigNumber, string, BigNumber, string, string, BigNumber, number] & {
          id: BigNumber;
          nftContract: string;
          tokenId: BigNumber;
          seller: string;
          buyer: string;
          price: BigNumber;
          state: number;
        })[]
      ]
    >;

    getListingFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    listingFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    marketowner(overrides?: CallOverrides): Promise<[string]>;
  };

  createMarketItem(
    nftContract: string,
    tokenId: BigNumberish,
    price: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createMarketSale(
    nftContract: string,
    id: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deleteMarketItem(
    itemId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fetchActiveItems(
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, string, BigNumber, string, string, BigNumber, number] & {
      id: BigNumber;
      nftContract: string;
      tokenId: BigNumber;
      seller: string;
      buyer: string;
      price: BigNumber;
      state: number;
    })[]
  >;

  fetchMyCreatedItems(
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, string, BigNumber, string, string, BigNumber, number] & {
      id: BigNumber;
      nftContract: string;
      tokenId: BigNumber;
      seller: string;
      buyer: string;
      price: BigNumber;
      state: number;
    })[]
  >;

  fetchMyPurchasedItems(
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, string, BigNumber, string, string, BigNumber, number] & {
      id: BigNumber;
      nftContract: string;
      tokenId: BigNumber;
      seller: string;
      buyer: string;
      price: BigNumber;
      state: number;
    })[]
  >;

  getListingFee(overrides?: CallOverrides): Promise<BigNumber>;

  listingFee(overrides?: CallOverrides): Promise<BigNumber>;

  marketowner(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    createMarketItem(
      nftContract: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createMarketSale(
      nftContract: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deleteMarketItem(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    fetchActiveItems(
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, string, BigNumber, string, string, BigNumber, number] & {
        id: BigNumber;
        nftContract: string;
        tokenId: BigNumber;
        seller: string;
        buyer: string;
        price: BigNumber;
        state: number;
      })[]
    >;

    fetchMyCreatedItems(
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, string, BigNumber, string, string, BigNumber, number] & {
        id: BigNumber;
        nftContract: string;
        tokenId: BigNumber;
        seller: string;
        buyer: string;
        price: BigNumber;
        state: number;
      })[]
    >;

    fetchMyPurchasedItems(
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, string, BigNumber, string, string, BigNumber, number] & {
        id: BigNumber;
        nftContract: string;
        tokenId: BigNumber;
        seller: string;
        buyer: string;
        price: BigNumber;
        state: number;
      })[]
    >;

    getListingFee(overrides?: CallOverrides): Promise<BigNumber>;

    listingFee(overrides?: CallOverrides): Promise<BigNumber>;

    marketowner(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "MarketItemCreated(uint256,address,uint256,address,address,uint256,uint8)"(
      id?: BigNumberish | null,
      nftContract?: string | null,
      tokenId?: BigNumberish | null,
      seller?: null,
      buyer?: null,
      price?: null,
      state?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, string, string, BigNumber, number],
      {
        id: BigNumber;
        nftContract: string;
        tokenId: BigNumber;
        seller: string;
        buyer: string;
        price: BigNumber;
        state: number;
      }
    >;

    MarketItemCreated(
      id?: BigNumberish | null,
      nftContract?: string | null,
      tokenId?: BigNumberish | null,
      seller?: null,
      buyer?: null,
      price?: null,
      state?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, string, string, BigNumber, number],
      {
        id: BigNumber;
        nftContract: string;
        tokenId: BigNumber;
        seller: string;
        buyer: string;
        price: BigNumber;
        state: number;
      }
    >;

    "MarketItemSold(uint256,address,uint256,address,address,uint256,uint8)"(
      id?: BigNumberish | null,
      nftContract?: string | null,
      tokenId?: BigNumberish | null,
      seller?: null,
      buyer?: null,
      price?: null,
      state?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, string, string, BigNumber, number],
      {
        id: BigNumber;
        nftContract: string;
        tokenId: BigNumber;
        seller: string;
        buyer: string;
        price: BigNumber;
        state: number;
      }
    >;

    MarketItemSold(
      id?: BigNumberish | null,
      nftContract?: string | null,
      tokenId?: BigNumberish | null,
      seller?: null,
      buyer?: null,
      price?: null,
      state?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, string, string, BigNumber, number],
      {
        id: BigNumber;
        nftContract: string;
        tokenId: BigNumber;
        seller: string;
        buyer: string;
        price: BigNumber;
        state: number;
      }
    >;
  };

  estimateGas: {
    createMarketItem(
      nftContract: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createMarketSale(
      nftContract: string,
      id: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deleteMarketItem(
      itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fetchActiveItems(overrides?: CallOverrides): Promise<BigNumber>;

    fetchMyCreatedItems(overrides?: CallOverrides): Promise<BigNumber>;

    fetchMyPurchasedItems(overrides?: CallOverrides): Promise<BigNumber>;

    getListingFee(overrides?: CallOverrides): Promise<BigNumber>;

    listingFee(overrides?: CallOverrides): Promise<BigNumber>;

    marketowner(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    createMarketItem(
      nftContract: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createMarketSale(
      nftContract: string,
      id: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deleteMarketItem(
      itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fetchActiveItems(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fetchMyCreatedItems(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fetchMyPurchasedItems(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getListingFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    listingFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marketowner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
